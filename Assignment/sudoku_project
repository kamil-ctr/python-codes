import tkinter as tk
from tkinter import messagebox
import random


class SudokuGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Sudoku Game")
        self.grid_size = 9  # Standard Sudoku size
        self.cells = [[None for _ in range(self.grid_size)] for _ in range(self.grid_size)]
        self.puzzle = self.generate_sudoku()  # Generate a static Sudoku puzzle for simplicity
        self.solution = [row[:] for row in self.puzzle]  # Copy the puzzle as the solution (you can customize solving logic)
        self.solve_puzzle()  # Solve the puzzle for validation purposes
        self.create_grid()
        self.create_buttons()

    def create_grid(self):
        """Creates the Sudoku grid."""
        for i in range(self.grid_size):
            for j in range(self.grid_size):
                frame = tk.Frame(self.root, width=50, height=50, borderwidth=1, relief="solid")
                frame.grid(row=i, column=j, padx=1, pady=1)
                value = self.puzzle[i][j]
                if value == 0:  # Empty cell
                    entry = tk.Entry(frame, justify="center", font=("Arial", 18))
                    entry.grid(sticky="nsew")
                    self.cells[i][j] = entry
                else:  # Pre-filled cell
                    label = tk.Label(frame, text=str(value), font=("Arial", 18), fg="blue")
                    label.grid(sticky="nsew")
                    self.cells[i][j] = None

    def create_buttons(self):
        """Creates the control buttons."""
        check_btn = tk.Button(self.root, text="Check Solution", command=self.check_solution)
        check_btn.grid(row=self.grid_size, column=0, columnspan=4, sticky="nsew", pady=10)

        reset_btn = tk.Button(self.root, text="Reset", command=self.reset_grid)
        reset_btn.grid(row=self.grid_size, column=4, columnspan=5, sticky="nsew", pady=10)

    def generate_sudoku(self):
        """Generates a simple Sudoku puzzle (static for now)."""
        return [
            [5, 3, 0, 0, 7, 0, 0, 0, 0],
            [6, 0, 0, 1, 9, 5, 0, 0, 0],
            [0, 9, 8, 0, 0, 0, 0, 6, 0],
            [8, 0, 0, 0, 6, 0, 0, 0, 3],
            [4, 0, 0, 8, 0, 3, 0, 0, 1],
            [7, 0, 0, 0, 2, 0, 0, 0, 6],
            [0, 6, 0, 0, 0, 0, 2, 8, 0],
            [0, 0, 0, 4, 1, 9, 0, 0, 5],
            [0, 0, 0, 0, 8, 0, 0, 7, 9],
        ]

    def solve_puzzle(self):
        """Solves the Sudoku puzzle using backtracking."""
        def is_safe(row, col, num):
            for x in range(9):
                if self.solution[row][x] == num or self.solution[x][col] == num:
                    return False
            start_row, start_col = 3 * (row // 3), 3 * (col // 3)
            for i in range(3):
                for j in range(3):
                    if self.solution[start_row + i][start_col + j] == num:
                        return False
            return True

        def solve():
            for i in range(9):
                for j in range(9):
                    if self.solution[i][j] == 0:
                        for num in range(1, 10):
                            if is_safe(i, j, num):
                                self.solution[i][j] = num
                                if solve():
                                    return True
                                self.solution[i][j] = 0
                        return False
            return True

        solve()

    def check_solution(self):
        """Validates the user's input against the solution."""
        for i in range(self.grid_size):
            for j in range(self.grid_size):
                if self.cells[i][j] is not None:
                    try:
                        value = int(self.cells[i][j].get())
                        if value != self.solution[i][j]:
                            raise ValueError
                    except ValueError:
                        messagebox.showerror("Error", f"Incorrect input at row {i + 1}, column {j + 1}")
                        return
        messagebox.showinfo("Success", "Congratulations! You solved the Sudoku.")

    def reset_grid(self):
        """Resets the grid to the initial puzzle state."""
        for i in range(self.grid_size):
            for j in range(self.grid_size):
                if self.cells[i][j] is not None:
                    self.cells[i][j].delete(0, tk.END)


if __name__ == "__main__":
    root = tk.Tk()
    game = SudokuGame(root)
    root.mainloop()
